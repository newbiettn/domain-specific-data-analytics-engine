@startuml

title __HELPERS's Class Diagram__\n

  namespace  {
    namespace e.fuberlin.wiwiss.d2rq {
      namespace helpers {
        class de.fuberlin.wiwiss.d2rq.helpers.AllTests {
            {static} + suite()
        }
      }
    }
  }
  

  namespace  {
    namespace e.fuberlin.wiwiss.d2rq {
      namespace helpers {
        class de.fuberlin.wiwiss.d2rq.helpers.FindTestFramework {
            {static} # m : Model
            - graph : GraphD2RQ
            - resultTriples : Set<Triple>
            # assertNoStatement()
            # assertStatement()
            # assertStatementCount()
            # dump()
            # find()
            # resource()
            # setUp()
            # tearDown()
            - toNode()
        }
      }
    }
  }
  

  namespace  {
    namespace e.fuberlin.wiwiss.d2rq {
      namespace helpers {
        class de.fuberlin.wiwiss.d2rq.helpers.HSQLDatabase {
            {static} + HSQL_DRIVER_CLASS : String
            {static} - HSQL_PASS : String
            {static} - HSQL_USER : String
            - conn : Connection
            - jdbcURL : String
            + HSQLDatabase()
            + clear()
            + close()
            + close()
            + executeSQL()
            + executeScript()
            + getConnection()
            + getJdbcURL()
            + getPassword()
            + getUser()
            + prepareSQL()
            + selectBytes()
            + selectClassName()
            + selectObject()
            + selectString()
        }
      }
    }
  }
  

  namespace  {
    namespace e.fuberlin.wiwiss.d2rq {
      namespace helpers {
        class de.fuberlin.wiwiss.d2rq.helpers.HSQLSimpleTest {
            {static} - EX : String
            - db : HSQLDatabase
            + setUp()
            + tearDown()
            + testDefaultMappingWithHelloWorld()
            + testFindTableWithSchemaInspector()
            + testGenerateDefaultMappingModel()
            + testGenerateEmptyGraphFromSimpleD2RQMapping()
            + testGenerateSomeClassMapsInDefaultMapping()
            + testGenerateTripleFromSimpleD2RQMapping()
            - generateDefaultGraphD2RQ()
            - generateDefaultMapping()
            - generateDefaultMappingModel()
        }
      }
    }
  }
  

  namespace  {
    namespace e.fuberlin.wiwiss.d2rq {
      namespace helpers {
        class de.fuberlin.wiwiss.d2rq.helpers.MappingHelper {
            {static} + connectToDummyDB()
            {static} + connectToDummyDBs()
            {static} + readFromTestFile()
        }
      }
    }
  }
  

  namespace  {
    namespace e.fuberlin.wiwiss.d2rq {
      namespace helpers {
        abstract class de.fuberlin.wiwiss.d2rq.helpers.QueryLanguageTestFramework {
            {static} # bigStringInResultLogger : Logger
            # currentSolution : Map<String, RDFNode>
            # differenceLogger : Logger
            # differentLogger : Logger
            # dumpLogger : Logger
            # model : ModelD2RQ
            # oldSQLResultSetLogger : Logger
            # oldSQLResultSetSeparatorLogger : Logger
            # performanceLogger : Logger
            # queryLogger : Logger
            # queryString : String
            # results : Set<Map<String, RDFNode>>
            # sqlResultSetLogger : Logger
            # testCaseSeparatorLogger : Logger
            # usingLogger : Logger
            ~ compareQueryHandlers : boolean
            ~ configs : int
            ~ diffInfo : BeanCounter[]
            ~ handlerDescription : String[]
            ~ nTimes : int
            ~ printed : String[]
            ~ resultMaps : Set<Map<String, RDFNode>>[]
            ~ startInst : BeanCounter
            ~ usingD2RQ : boolean[]
            ~ verbatim : boolean[]
            {static} - pckg : String
            + QueryLanguageTestFramework()
            + runTest()
            {static} + solutionToMap()
            # assertResultCount()
            # assertSolution()
            # dump()
            # expectVariable()
            {abstract} # mapURL()
            # setUp()
            # setUpHandlers()
            # setUpMixOutputs()
            # setUpShowAll()
            # setUpShowErrors()
            # setUpShowPerformance()
            # setUpShowStatements()
            # setUpShowWarnings()
            # sparql()
            # tearDown()
            - addSolution()
            - printArray()
            - printCollection()
            - printMap()
            - printObject()
        }
      }
    }
  }
  



right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
