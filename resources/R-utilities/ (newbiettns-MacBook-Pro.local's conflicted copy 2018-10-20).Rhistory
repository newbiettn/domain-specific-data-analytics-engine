as.data.frame()
################################################################################
ds.names <- unique(as.character(dt$DATASET))
score.list <- list()
k <- 1
for (ds in ds.names){
subset.dt <- dt %>%
filter(DATASET == ds) %>%
as.data.frame()
subset.recommended <- recommmended %>%
filter(V1 == ds) %>%
as.data.frame()
score <- c()
for (j in seq(10, 50, 5)){
list.wk1 <- as.numeric(subset.dt$ID[1:j])
list.wk2 <- as.numeric(subset.recommended[1, 2:(j+1)])
# print(paste0(list.wk1))
# print(paste0(list.wk2))
# print("============================")
names(list.wk1) <- names(list.wk2) <- LETTERS[1:j]
s <- rbo(list.wk1, list.wk2, p = 0.95)
score <- c(score, s)
}
score.list[[k]] <- score
k <- k + 1
}
score.list
rm(list = ls(all = T))
################################################################################
library(dplyr)
library(gespeR)
################################################################################
dt <- read.csv("evaluation_experiment.csv", header = TRUE)
recommmended <- read.csv("recommended_wk.csv", header = FALSE)
################################################################################
dt <- dt %>%
group_by(DATASET, FLOW) %>%
mutate(MEANAUC = mean(WEIGHTEDAREAUNDERROC),
MEANTIMEELAPSED = mean(TIMEELAPSED)) %>%
as.data.frame()
dt <- dt %>%
group_by(DATASET) %>%
arrange(DATASET, desc(MEANAUC)) %>%
mutate(rankByAUC = rank(-MEANAUC, ties.method = "min")) %>%
as.data.frame()
dt <- dt %>%
group_by(DATASET, rankByAUC) %>%
arrange(DATASET, rankByAUC, MEANTIMEELAPSED) %>%
mutate(rankByTime = rank(MEANTIMEELAPSED, ties.method = "random")) %>%
as.data.frame()
myrank <- function(rankByErr, rankByTime){
newrank <- c()
if (length(unique(rankByErr)) == 1){
newrank <- rankByErr + rankByTime - 1
} else {
newrank <- rankByErr
}
return (newrank)
}
dt <- dt %>%
group_by(DATASET, rankByAUC, rankByTime) %>%
arrange(DATASET, rankByAUC, rankByTime) %>%
mutate(rank = myrank(rankByAUC, rankByTime)) %>%
as.data.frame()
################################################################################
ds.names <- unique(as.character(dt$DATASET))
score.list <- list()
k <- 1
for (ds in ds.names){
subset.dt <- dt %>%
filter(DATASET == ds) %>%
as.data.frame()
subset.recommended <- recommmended %>%
filter(V1 == ds) %>%
as.data.frame()
score <- c()
for (j in seq(10, 100, 10)){
list.wk1 <- as.numeric(subset.dt$ID[1:j])
list.wk2 <- as.numeric(subset.recommended[1, 2:(j+1)])
# print(paste0(list.wk1))
# print(paste0(list.wk2))
# print("============================")
names(list.wk1) <- names(list.wk2) <- LETTERS[1:j]
s <- rbo(list.wk1, list.wk2, p = 0.95)
score <- c(score, s)
}
score.list[[k]] <- score
k <- k + 1
}
score.list
rm(list = ls(all = T))
################################################################################
library(ggplot2)
library(dplyr)
library(gespeR)
################################################################################
dt <- read.csv("evaluation_experiment.csv", header = TRUE)
recommmended <- read.csv("recommended_wk.csv", header = FALSE)
################################################################################
dt <- dt %>%
group_by(DATASET, FLOW) %>%
mutate(MEANAUC = mean(WEIGHTEDAREAUNDERROC),
MEANTIMEELAPSED = mean(TIMEELAPSED)) %>%
as.data.frame()
dt <- dt %>%
group_by(DATASET) %>%
arrange(DATASET, desc(MEANAUC)) %>%
mutate(rankByAUC = rank(-MEANAUC, ties.method = "min")) %>%
as.data.frame()
dt <- dt %>%
group_by(DATASET, rankByAUC) %>%
arrange(DATASET, rankByAUC, MEANTIMEELAPSED) %>%
mutate(rankByTime = rank(MEANTIMEELAPSED, ties.method = "random")) %>%
as.data.frame()
myrank <- function(rankByErr, rankByTime){
newrank <- c()
if (length(unique(rankByErr)) == 1){
newrank <- rankByErr + rankByTime - 1
} else {
newrank <- rankByErr
}
return (newrank)
}
dt <- dt %>%
group_by(DATASET, rankByAUC, rankByTime) %>%
arrange(DATASET, rankByAUC, rankByTime) %>%
mutate(rank = myrank(rankByAUC, rankByTime)) %>%
as.data.frame()
################################################################################
ds.names <- unique(as.character(dt$DATASET))
score.list <- list()
k <- 1
for (ds in ds.names){
subset.dt <- dt %>%
filter(DATASET == ds) %>%
as.data.frame()
subset.recommended <- recommmended %>%
filter(V1 == ds) %>%
as.data.frame()
score <- c()
for (j in seq(10, 100, 10)){
list.wk1 <- as.numeric(subset.dt$ID[1:j])
list.wk2 <- as.numeric(subset.recommended[1, 2:(j+1)])
# print(paste0(list.wk1))
# print(paste0(list.wk2))
# print("============================")
names(list.wk1) <- names(list.wk2) <- LETTERS[1:j]
s <- rbo(list.wk1, list.wk2, p = 0.95)
score <- c(score, s)
}
score.list[[k]] <- score
k <- k + 1
}
################################################################################
# Plot
score.list
plot.dt <- as.data.frame(score.list)
score.list
rm(list = ls(all = T))
################################################################################
library(ggplot2)
library(dplyr)
library(gespeR)
################################################################################
dt <- read.csv("evaluation_experiment.csv", header = TRUE)
recommmended <- read.csv("recommended_wk.csv", header = FALSE)
################################################################################
dt <- dt %>%
group_by(DATASET, FLOW) %>%
mutate(MEANAUC = mean(WEIGHTEDAREAUNDERROC),
MEANTIMEELAPSED = mean(TIMEELAPSED)) %>%
as.data.frame()
dt <- dt %>%
group_by(DATASET) %>%
arrange(DATASET, desc(MEANAUC)) %>%
mutate(rankByAUC = rank(-MEANAUC, ties.method = "min")) %>%
as.data.frame()
dt <- dt %>%
group_by(DATASET, rankByAUC) %>%
arrange(DATASET, rankByAUC, MEANTIMEELAPSED) %>%
mutate(rankByTime = rank(MEANTIMEELAPSED, ties.method = "random")) %>%
as.data.frame()
myrank <- function(rankByErr, rankByTime){
newrank <- c()
if (length(unique(rankByErr)) == 1){
newrank <- rankByErr + rankByTime - 1
} else {
newrank <- rankByErr
}
return (newrank)
}
dt <- dt %>%
group_by(DATASET, rankByAUC, rankByTime) %>%
arrange(DATASET, rankByAUC, rankByTime) %>%
mutate(rank = myrank(rankByAUC, rankByTime)) %>%
as.data.frame()
################################################################################
ds.names <- unique(as.character(dt$DATASET))
score.list <- list()
k <- 1
for (ds in ds.names){
subset.dt <- dt %>%
filter(DATASET == ds) %>%
as.data.frame()
subset.recommended <- recommmended %>%
filter(V1 == ds) %>%
as.data.frame()
score <- c()
for (j in seq(10, 100, 10)){
list.wk1 <- as.numeric(subset.dt$ID[1:j])
list.wk2 <- as.numeric(subset.recommended[1, 2:(j+1)])
# print(paste0(list.wk1))
# print(paste0(list.wk2))
# print("============================")
names(list.wk1) <- names(list.wk2) <- LETTERS[1:j]
s <- rbo(list.wk1, list.wk2, p = 0.95)
score <- c(score, s)
}
score.list[[k]] <- score
k <- k + 1
}
################################################################################
# Plot
score.list
rm(list = ls(all = T))
################################################################################
library(dplyr)
library(ggplot2)
library(gespeR)
################################################################################
dt <- read.csv("evaluation_experiment.csv", header = TRUE)
recommmended <- read.csv("recommended_wk.csv", header = FALSE)
################################################################################
dt <- dt %>%
group_by(DATASET, FLOW) %>%
mutate(MEANAUC = mean(WEIGHTEDAREAUNDERROC),
MEANTIMEELAPSED = mean(TIMEELAPSED)) %>%
as.data.frame()
dt <- dt %>%
group_by(DATASET) %>%
arrange(DATASET, desc(MEANAUC)) %>%
mutate(rankByAUC = rank(-MEANAUC, ties.method = "min")) %>%
as.data.frame()
dt <- dt %>%
group_by(DATASET, rankByAUC) %>%
arrange(DATASET, rankByAUC, MEANTIMEELAPSED) %>%
mutate(rankByTime = rank(MEANTIMEELAPSED, ties.method = "random")) %>%
as.data.frame()
myrank <- function(rankByErr, rankByTime){
newrank <- c()
if (length(unique(rankByErr)) == 1){
newrank <- rankByErr + rankByTime - 1
} else {
newrank <- rankByErr
}
return (newrank)
}
dt <- dt %>%
group_by(DATASET, rankByAUC, rankByTime) %>%
arrange(DATASET, rankByAUC, rankByTime) %>%
mutate(rank = myrank(rankByAUC, rankByTime)) %>%
as.data.frame()
################################################################################
ds.names <- unique(as.character(dt$DATASET))
score.list <- list()
k <- 1
for (ds in ds.names){
subset.dt <- dt %>%
filter(DATASET == ds) %>%
as.data.frame()
subset.recommended <- recommmended %>%
filter(V1 == ds) %>%
as.data.frame()
score <- c()
for (j in seq(10, 100, 10)){
list.wk1 <- as.numeric(subset.dt$ID[1:j])
list.wk2 <- as.numeric(subset.recommended[1, 2:(j+1)])
# print(paste0(list.wk1))
# print(paste0(list.wk2))
# print("============================")
names(list.wk1) <- names(list.wk2) <- LETTERS[1:j]
s <- rbo(list.wk1, list.wk2, p = 0.95)
score <- c(score, s)
}
score.list[[k]] <- score
k <- k + 1
}
################################################################################
# Plot
score.list
rm(list = ls(all = T))
################################################################################
library(dplyr)
# library(ggplot2)
library(gespeR)
################################################################################
dt <- read.csv("evaluation_experiment.csv", header = TRUE)
recommmended <- read.csv("recommended_wk.csv", header = FALSE)
################################################################################
dt <- dt %>%
group_by(DATASET, FLOW) %>%
mutate(MEANAUC = mean(WEIGHTEDAREAUNDERROC),
MEANTIMEELAPSED = mean(TIMEELAPSED)) %>%
as.data.frame()
dt <- dt %>%
group_by(DATASET) %>%
arrange(DATASET, desc(MEANAUC)) %>%
mutate(rankByAUC = rank(-MEANAUC, ties.method = "min")) %>%
as.data.frame()
dt <- dt %>%
group_by(DATASET, rankByAUC) %>%
arrange(DATASET, rankByAUC, MEANTIMEELAPSED) %>%
mutate(rankByTime = rank(MEANTIMEELAPSED, ties.method = "random")) %>%
as.data.frame()
myrank <- function(rankByErr, rankByTime){
newrank <- c()
if (length(unique(rankByErr)) == 1){
newrank <- rankByErr + rankByTime - 1
} else {
newrank <- rankByErr
}
return (newrank)
}
dt <- dt %>%
group_by(DATASET, rankByAUC, rankByTime) %>%
arrange(DATASET, rankByAUC, rankByTime) %>%
mutate(rank = myrank(rankByAUC, rankByTime)) %>%
as.data.frame()
################################################################################
ds.names <- unique(as.character(dt$DATASET))
score.list <- list()
k <- 1
for (ds in ds.names){
subset.dt <- dt %>%
filter(DATASET == ds) %>%
as.data.frame()
subset.recommended <- recommmended %>%
filter(V1 == ds) %>%
as.data.frame()
score <- c()
for (j in seq(10, 100, 10)){
list.wk1 <- as.numeric(subset.dt$ID[1:j])
list.wk2 <- as.numeric(subset.recommended[1, 2:(j+1)])
# print(paste0(list.wk1))
# print(paste0(list.wk2))
# print("============================")
names(list.wk1) <- names(list.wk2) <- LETTERS[1:j]
s <- rbo(list.wk1, list.wk2, p = 0.95)
score <- c(score, s)
}
score.list[[k]] <- score
k <- k + 1
}
################################################################################
# Plot
score.list
rm(list = ls(all = T))
################################################################################
library(dplyr)
################################################################################
dt <- read.csv("temp.csv", header = TRUE)
dt$FLOW <- as.factor(dt$FLOW)
n_levels <- length(levels(factor(dt$FLOW)))
# remove workflows that do not perform on all datasets
# for (cluster in 0:max(dt$CLUSTER)){
temp.dt <- dt %>%
# filter(CLUSTER == cluster) %>%
as.data.frame()
num.datasets <- length(unique(temp.dt$DATASET))
tb <- table(temp.dt$CLASSIFIER, temp.dt$ATTRIBUTESELECTION)
rnames <- row.names(tb)
cnames <- colnames(tb)
for (i in 1:nrow(tb)){ #row
for(j in 1:ncol(tb)){ #col
if (tb[i,j] < num.datasets && tb[i,j] > 0){
c <- rnames[i]
a <- cnames[j]
dt <- dt[!(dt$CLASSIFIER == c &
dt$ATTRIBUTESELECTION == a &
dt$CLUSTER == cluster),]
print(paste0(c, "/", a))
}
}
}
# }
rm(list = ls(all = T))
################################################################################
library(dplyr)
################################################################################
dt <- read.csv("temp.csv", header = TRUE)
dt$FLOW <- as.factor(dt$FLOW)
n_levels <- length(levels(factor(dt$FLOW)))
# remove workflows that do not perform on all datasets
# for (cluster in 0:max(dt$CLUSTER)){
temp.dt <- dt %>%
# filter(CLUSTER == cluster) %>%
as.data.frame()
num.datasets <- length(unique(temp.dt$DATASET))
tb <- table(temp.dt$CLASSIFIER, temp.dt$ATTRIBUTESELECTION)
rnames <- row.names(tb)
cnames <- colnames(tb)
for (i in 1:nrow(tb)){ #row
for(j in 1:ncol(tb)){ #col
if (tb[i,j] < num.datasets && tb[i,j] > 0){
c <- rnames[i]
a <- cnames[j]
dt <- dt[!(dt$CLASSIFIER == c &
dt$ATTRIBUTESELECTION == a),]
print(paste0(c, "/", a))
}
}
}
# }
View(dt)
rm(list = ls(all = T))
################################################################################
library(dplyr)
################################################################################
dt <- read.csv("temp.csv", header = TRUE)
dt$FLOW <- as.factor(dt$FLOW)
n_levels <- length(levels(factor(dt$FLOW)))
# remove workflows that do not perform on all datasets
# for (cluster in 0:max(dt$CLUSTER)){
temp.dt <- dt %>%
# filter(CLUSTER == cluster) %>%
as.data.frame()
num.datasets <- length(unique(temp.dt$DATASET))
tb <- table(temp.dt$CLASSIFIER, temp.dt$ATTRIBUTESELECTION)
tb
rnames <- row.names(tb)
cnames <- colnames(tb)
for (i in 1:nrow(tb)){ #row
for(j in 1:ncol(tb)){ #col
if (tb[i,j] < num.datasets && tb[i,j] > 0){
c <- rnames[i]
a <- cnames[j]
dt <- dt[!(dt$CLASSIFIER == c &
dt$ATTRIBUTESELECTION == a),]
print(paste0(c, "/", a))
}
}
}
# }
tb <- table(temp.dt$CLASSIFIER, temp.dt$ATTRIBUTESELECTION)
tb
num.datasets <- length(unique(temp.dt$DATASET))
num.datasets
tb <- table(dt$CLASSIFIER, dt$ATTRIBUTESELECTION)
tb
rm(list = ls(all = T))
################################################################################
library(dplyr)
################################################################################
dt <- read.csv("temp.csv", header = TRUE)
dt$FLOW <- as.factor(dt$FLOW)
n_levels <- length(levels(factor(dt$FLOW)))
# remove workflows that do not perform on all datasets
# for (cluster in 0:max(dt$CLUSTER)){
temp.dt <- dt %>%
# filter(CLUSTER == cluster) %>%
as.data.frame()
num.datasets <- length(unique(temp.dt$DATASET))
tb <- table(temp.dt$CLASSIFIER, temp.dt$ATTRIBUTESELECTION)
tb
rnames <- row.names(tb)
cnames <- colnames(tb)
for (i in 1:nrow(tb)){ #row
for(j in 1:ncol(tb)){ #col
if (tb[i,j] < num.datasets && tb[i,j] > 0){
c <- rnames[i]
a <- cnames[j]
dt <- dt[!(dt$CLASSIFIER == c &
dt$ATTRIBUTESELECTION == a),]
print(paste0(c, "/", a))
}
}
}
# }
dt <- dt %>%
group_by(DATASET) %>%
arrange(DATASET, desc(MEANAUC)) %>%
mutate(rankByAUC = rank(-MEANAUC, ties.method = "min")) %>%
as.data.frame()
dt <- dt %>%
group_by(DATASET, rankByAUC) %>%
arrange(DATASET, rankByAUC, MEANTIMEELAPSED) %>%
mutate(rankByTime = rank(MEANTIMEELAPSED, ties.method = "random")) %>%
as.data.frame()
myrank <- function(rankByErr, rankByTime){
newrank <- c()
if (length(unique(rankByErr)) == 1){
newrank <- rankByErr + rankByTime - 1
} else {
newrank <- rankByErr
}
return (newrank)
}
dt <- dt %>%
group_by(DATASET, rankByAUC, rankByTime) %>%
arrange(DATASET, rankByAUC, rankByTime) %>%
mutate(rank = myrank(rankByAUC, rankByTime)) %>%
as.data.frame()
dt$MEANAUC <- as.numeric(as.character(dt$MEANAUC))
dt$MEANFMEASURE <- as.numeric(as.character(dt$MEANFMEASURE))
dt$MEANPRECISION <- as.numeric(as.character(dt$MEANPRECISION))
dt$MEANRECALL <- as.numeric(as.character(dt$MEANRECALL))
dt$MEANERRORRATE <- as.numeric(as.character(dt$MEANERRORRATE))
dt$MEANTIMEELAPSED <- as.numeric(as.character(dt$MEANTIMEELAPSED))
mask <- apply(dt[c("MEANAUC", "MEANFMEASURE", "MEANPRECISION",
"MEANRECALL", "MEANERRORRATE", "MEANTIMEELAPSED")], 2, is.nan)
dt[is.na(dt)] <- NA
View(dt)
