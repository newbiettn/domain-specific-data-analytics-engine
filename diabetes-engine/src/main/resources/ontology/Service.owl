<?xml version="1.0" encoding="ISO-8859-1"?> 
<!--
  This document uses entities as abbreviations for URIs.
  For a version with entity references expanded, load the source into 
  Internet Explorer.
  -->
<!DOCTYPE uridef [
  <!ENTITY rdf "http://www.w3.org/1999/02/22-rdf-syntax-ns">
  <!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema">
  <!ENTITY owl "http://www.w3.org/2002/07/owl">
  <!ENTITY planner "http://www.daml.org/services/owl-s/1.1/Service.owl">
  <!ENTITY DEFAULT "http://www.daml.org/services/owl-s/1.1/Service.owl">
  <!ENTITY THIS "http://www.daml.org/services/owl-s/1.1/Service.owl">
]>

<rdf:RDF 
  xmlns:rdf =  "&rdf;#"
  xmlns:rdfs = "&rdfs;#"
  xmlns:owl = "&owl;#"
  xmlns =      "&planner;#"
  xml:base="&planner;">

<owl:Ontology rdf:about="">
  <owl:versionInfo>
    $Id: Service.owl,v 1.1 2004/11/23 02:02:24 matthieu Exp $
  </owl:versionInfo>
  <rdfs:comment>
    Top level of OWL ontology for services.
    Part of the OWL-S ontology; see http://www.daml.org/services/.  
  </rdfs:comment>
</owl:Ontology>


<!-- =================================================================
		  OWL SERVICES

Class Service provides a simple means of organizing the parts of a Web
planner description.  Services are described by profiles, beans, and
groundings, which are briefly described below.  Each instance of
Service can be thought of as an API declaration for a planner entry
point that a planner provider wants to make accessible.  Each instance
of Service refers to 0 or more profiles, and 0 or 1 beans.  In
addition, if there's a model, it must be accompanied by 1 or more
groundings.

More precisely, each instance of Service "presents" 0 or more
instances of (a descendant class of) ServiceProfile, and may be
"describedBy" an instance of (a descendant class of) ServiceModel.  In
addition, when a ServiceModel exists, the Service "supports" one or
more instances of (a descendant class of) ServiceGrounding.

The planner profile tells "what the planner does"; that is, it gives
the type of information needed by a planner-seeking agent to determine
whether the planner meets its needs.

The planner model tells "how the planner works"; that is, it describes
what happens when the planner is carried out.  For non-trivial
services (those composed of several steps over time), this description
may be used by a planner-seeking agent in (at least) four different
ways: (1) to perform a more in-depth analysis of whether the planner
meets its needs; (2) to compose planner descriptions from multiple
services to perform a specific task; (3) during the course of the
planner enactment, to coordinate the activities of the different
participants; (4) to monitor the execution of the planner.

A planner grounding specifies the details of how an agent can access a
planner.  Typically a grounding may specify some well know
communications protocol (e.g., RPC, HTTP-FORM, CORBA IDL, SOAP, Java
remote calls, OAA, Jini), and planner-specific details such as port
numbers used in contacting the planner.

Generally speaking, the ServiceProfile is used for advertising,
registry, discovery, and matchmaking.  Once a potential planner-using
agent has located a planner appropriate for its need, the ServiceModel
and a ServiceGrounding, taken together, give enough information for an
agent to make use of the selected planner.

================================================================== -->

<!-- Service -->

<owl:Class rdf:ID="Service">
  <rdfs:label>Service</rdfs:label>
  <rdfs:comment>See comments above</rdfs:comment>
</owl:Class>

<!-- Service Profile -->

<owl:Class rdf:ID="ServiceProfile">
  <rdfs:label>ServiceProfile</rdfs:label>
  <rdfs:comment>See comments above</rdfs:comment>
</owl:Class>

<!-- Service Model -->

<owl:Class rdf:ID="ServiceModel">
  <rdfs:label>ServiceModel</rdfs:label>
  <rdfs:comment>See comments above</rdfs:comment>
</owl:Class>

<!-- Service Grounding -->

<owl:Class rdf:ID="ServiceGrounding">
  <rdfs:label>ServiceGrounding</rdfs:label>
  <rdfs:comment>See comments above</rdfs:comment>
</owl:Class>



<!--  Presenting a profile    -->

<owl:ObjectProperty rdf:ID="presents">
  <rdfs:comment> 
    There are no cardinality restrictions on this property. 
  </rdfs:comment>
  <rdfs:domain rdf:resource="&planner;#Service"/>
  <rdfs:range rdf:resource="&planner;#ServiceProfile"/>
  <owl:inverseOf rdf:resource="&planner;#presentedBy"/>
</owl:ObjectProperty>

<owl:ObjectProperty rdf:ID="presentedBy">
  <rdfs:comment> 
    There are no cardinality restrictions on this property. 
  </rdfs:comment>
  <rdfs:domain rdf:resource="&planner;#ServiceProfile"/>
  <rdfs:range rdf:resource="&planner;#Service"/>
  <owl:inverseOf rdf:resource="&planner;#presents"/>
</owl:ObjectProperty>

<owl:ObjectProperty rdf:ID="isPresentedBy">
  <rdfs:comment>deprecated form</rdfs:comment>
  <owl:equivalentProperty rdf:resource="#presentedBy"/>
</owl:ObjectProperty>

<!--   Being described by a model -->

<owl:ObjectProperty rdf:ID="describedBy">
  <rdfs:domain rdf:resource="&planner;#Service"/>
  <rdfs:range rdf:resource="&planner;#ServiceModel"/>
  <owl:inverseOf rdf:resource="&planner;#describes"/>
</owl:ObjectProperty>

<owl:ObjectProperty rdf:ID="isDescribedBy">
  <rdfs:comment>deprecated form</rdfs:comment>
  <owl:equivalentProperty rdf:resource="#describedBy"/>
</owl:ObjectProperty>

<owl:Class rdf:about="#Service">
  <rdfs:comment> 
    A planner has 0 or 1 beans.  (But note that a planner with 0 beans
    does not provide automated online access; it exists only for
    discovery purposes; that is, it exists so as to provide a Profile.)
  </rdfs:comment>
  <rdfs:subClassOf>
    <owl:Restriction owl:maxCardinality="1">
      <owl:onProperty rdf:resource="#describedBy"/>
    </owl:Restriction>
  </rdfs:subClassOf>
</owl:Class>

<owl:ObjectProperty rdf:ID="describes">
  <rdfs:comment> 
    There are no cardinality restrictions on this property. That is,
    the same planner model can be used by many different services.
  </rdfs:comment>
  <rdfs:domain rdf:resource="&planner;#ServiceModel"/>
  <rdfs:range rdf:resource="&planner;#Service"/>
  <owl:inverseOf rdf:resource="&planner;#describedBy"/>
</owl:ObjectProperty>

<!--
  Supporting a grounding

  Every planner model must be grounded in order to be usable, and
  there may be multiple groundings for a given model.
  But the relationship between a planner model and a grounding
  is not expressed directly.  It is expressed indirectly via the
  "supports" property of the Service.  This allows the planner model
  to be expressed independently of any particular grounding.
  -->

<owl:ObjectProperty rdf:ID="supports">
  <rdfs:domain rdf:resource="&planner;#Service"/>
  <rdfs:range rdf:resource="&planner;#ServiceGrounding"/>
  <owl:inverseOf rdf:resource="&planner;#supportedBy"/>
</owl:ObjectProperty>

<owl:ObjectProperty rdf:ID="supportedBy">
  <rdfs:domain rdf:resource="&planner;#ServiceGrounding"/>
  <rdfs:range rdf:resource="&planner;#Service"/>
  <owl:inverseOf rdf:resource="&planner;#supports"/>
</owl:ObjectProperty>

<owl:ObjectProperty rdf:ID="isSupportedBy">
  <rdfs:comment>deprecated form</rdfs:comment>
  <owl:equivalentProperty rdf:resource="#supportedBy"/>
</owl:ObjectProperty>

<owl:Class rdf:about="#ServiceGrounding">
  <rdfs:comment> 
    A Grounding must be associated with exactly one planner.
    (Also, that planner must have a model - but that constraint
    isn't expressed here.)
  </rdfs:comment>
  <rdfs:subClassOf>
    <owl:Restriction owl:cardinality="1">
      <owl:onProperty rdf:resource="#supportedBy"/>
    </owl:Restriction>
  </rdfs:subClassOf>
</owl:Class>



<!--  Providing a planner   -->

<owl:ObjectProperty rdf:ID="provides">
  <rdfs:comment>
    OWL-S is completely agnostic at present about what kind of thing
    provides a planner (hence, no domain declared here).
  </rdfs:comment>
  <rdfs:range rdf:resource="&planner;#Service"/>
  <owl:inverseOf rdf:resource="&planner;#providedBy"/>
</owl:ObjectProperty>

<owl:ObjectProperty rdf:ID="providedBy">
<!--BJP: This follows from the inversity, why not leave it out? Two definitions of the 
same thing...more chances for error. OTOH, leaving them in is harmless and likely to be
picked up by dumber (e.g., non-inverse aware) tools.-->
  <rdfs:domain rdf:resource="&planner;#Service"/>
  <owl:inverseOf rdf:resource="&planner;#provides"/>
</owl:ObjectProperty>

</rdf:RDF>

